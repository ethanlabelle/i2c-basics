
i2c_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003544  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080036cc  080036cc  000136cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003714  08003714  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800371c  0800371c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800371c  0800371c  0001371c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003720  08003720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003730  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003730  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bef3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d2  00000000  00000000  0002bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b58  00000000  00000000  0002d808  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  0002e360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252de  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009199  00000000  00000000  000540be  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5f33  00000000  00000000  0005d257  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014318a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ea8  00000000  00000000  00143208  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036b4 	.word	0x080036b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036b4 	.word	0x080036b4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fac3 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f839 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f91f 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004da:	f000 f8ed 	bl	80006b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004de:	f000 f8ab 	bl	8000638 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  int arduino_address = (0x8 << 1); // left-shift 1, add 1 to write
 80004e2:	2310      	movs	r3, #16
 80004e4:	613b      	str	r3, [r7, #16]
  int timeout = 50;
 80004e6:	2332      	movs	r3, #50	; 0x32
 80004e8:	60fb      	str	r3, [r7, #12]
  int led_state = 0x0; // 0 for OFF, 1 for ON
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]

  // for detecting button push
  int Button_State = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
  int Prev_Button_State = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Button_State = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80004f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004fa:	4811      	ldr	r0, [pc, #68]	; (8000540 <main+0x78>)
 80004fc:	f000 fdb6 	bl	800106c <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	60bb      	str	r3, [r7, #8]
	  if (Prev_Button_State == 1 && Button_State == 0){ // state change
 8000504:	697b      	ldr	r3, [r7, #20]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d116      	bne.n	8000538 <main+0x70>
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d113      	bne.n	8000538 <main+0x70>
		  if (led_state == 0x1){
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d102      	bne.n	800051c <main+0x54>
			  led_state = 0x0;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	e004      	b.n	8000526 <main+0x5e>
		  }
		  else if (led_state == 0x0){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d101      	bne.n	8000526 <main+0x5e>
			  led_state = 0x1;
 8000522:	2301      	movs	r3, #1
 8000524:	607b      	str	r3, [r7, #4]
		  }
		  HAL_I2C_Master_Transmit(&hi2c1, arduino_address, &led_state, 1, timeout);
 8000526:	693b      	ldr	r3, [r7, #16]
 8000528:	b299      	uxth	r1, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	1d3a      	adds	r2, r7, #4
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2301      	movs	r3, #1
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x7c>)
 8000534:	f000 fe5a 	bl	80011ec <HAL_I2C_Master_Transmit>
	  }

	  Prev_Button_State = Button_State;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	617b      	str	r3, [r7, #20]
	  Button_State = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800053c:	e7db      	b.n	80004f6 <main+0x2e>
 800053e:	bf00      	nop
 8000540:	48000800 	.word	0x48000800
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0b8      	sub	sp, #224	; 0xe0
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f8a4 	bl	80036a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2288      	movs	r2, #136	; 0x88
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 f896 	bl	80036a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000578:	2302      	movs	r3, #2
 800057a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	2302      	movs	r3, #2
 8000594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000598:	2301      	movs	r3, #1
 800059a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800059e:	230a      	movs	r3, #10
 80005a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a4:	2307      	movs	r3, #7
 80005a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f97a 	bl	80018b4 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c6:	f000 f90f 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2303      	movs	r3, #3
 80005d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005ec:	2104      	movs	r1, #4
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 fd46 	bl	8002080 <HAL_RCC_ClockConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005fa:	f000 f8f5 	bl	80007e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005fe:	2342      	movs	r3, #66	; 0x42
 8000600:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000602:	2300      	movs	r3, #0
 8000604:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000606:	2300      	movs	r3, #0
 8000608:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4618      	mov	r0, r3
 800060e:	f001 ff3b 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f8e6 	bl	80007e8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800061c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000620:	f001 f8f2 	bl	8001808 <HAL_PWREx_ControlVoltageScaling>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800062a:	f000 f8dd 	bl	80007e8 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	37e0      	adds	r7, #224	; 0xe0
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_I2C1_Init+0x74>)
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <MX_I2C1_Init+0x78>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_I2C1_Init+0x74>)
 8000644:	4a1b      	ldr	r2, [pc, #108]	; (80006b4 <MX_I2C1_Init+0x7c>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <MX_I2C1_Init+0x74>)
 8000650:	2201      	movs	r2, #1
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000672:	480e      	ldr	r0, [pc, #56]	; (80006ac <MX_I2C1_Init+0x74>)
 8000674:	f000 fd2a 	bl	80010cc <HAL_I2C_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800067e:	f000 f8b3 	bl	80007e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000682:	2100      	movs	r1, #0
 8000684:	4809      	ldr	r0, [pc, #36]	; (80006ac <MX_I2C1_Init+0x74>)
 8000686:	f001 f819 	bl	80016bc <HAL_I2CEx_ConfigAnalogFilter>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000690:	f000 f8aa 	bl	80007e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000694:	2100      	movs	r1, #0
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_I2C1_Init+0x74>)
 8000698:	f001 f85b 	bl	8001752 <HAL_I2CEx_ConfigDigitalFilter>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a2:	f000 f8a1 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028
 80006b0:	40005400 	.word	0x40005400
 80006b4:	10909cec 	.word	0x10909cec

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART2_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006fc:	f002 fb74 	bl	8002de8 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f86f 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000074 	.word	0x20000074
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a2a      	ldr	r2, [pc, #168]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <MX_GPIO_Init+0xc4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_GPIO_Init+0xc4>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	2120      	movs	r1, #32
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 fc81 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800079a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0xc8>)
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_GPIO_Init+0xcc>)
 80007b0:	f000 fab4 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007b4:	2320      	movs	r3, #32
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f000 faa5 	bl	8000d1c <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000
 80007e0:	10210000 	.word	0x10210000
 80007e4:	48000800 	.word	0x48000800

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ee:	e7fe      	b.n	80007ee <Error_Handler+0x6>

080007f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x44>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x44>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6613      	str	r3, [r2, #96]	; 0x60
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_MspInit+0x44>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000812:	4a08      	ldr	r2, [pc, #32]	; (8000834 <HAL_MspInit+0x44>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000818:	6593      	str	r3, [r2, #88]	; 0x58
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800081e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000

08000838 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <HAL_I2C_MspInit+0x7c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d128      	bne.n	80008ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000878:	2312      	movs	r3, #18
 800087a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087c:	2301      	movs	r3, #1
 800087e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000884:	2304      	movs	r3, #4
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <HAL_I2C_MspInit+0x84>)
 8000890:	f000 fa44 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 800089a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800089e:	6593      	str	r3, [r2, #88]	; 0x58
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_I2C_MspInit+0x80>)
 80008a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	; 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40005400 	.word	0x40005400
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48000400 	.word	0x48000400

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0x7c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d128      	bne.n	8000934 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ec:	6593      	str	r3, [r2, #88]	; 0x58
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_UART_MspInit+0x80>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_UART_MspInit+0x80>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000912:	230c      	movs	r3, #12
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000930:	f000 f9f4 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8be 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <SystemInit+0x64>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a16      	ldr	r2, [pc, #88]	; (80009fc <SystemInit+0x64>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <SystemInit+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <SystemInit+0x68>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <SystemInit+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <SystemInit+0x68>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <SystemInit+0x68>)
 80009c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <SystemInit+0x68>)
 80009d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <SystemInit+0x68>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <SystemInit+0x68>)
 80009dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <SystemInit+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <SystemInit+0x64>)
 80009ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ee:	609a      	str	r2, [r3, #8]
#endif
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00
 8000a00:	40021000 	.word	0x40021000

08000a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a08:	f7ff ffc6 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a0e:	e003      	b.n	8000a18 <LoopCopyDataInit>

08000a10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a16:	3104      	adds	r1, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a20:	d3f6      	bcc.n	8000a10 <CopyDataInit>
	ldr	r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a24:	e002      	b.n	8000a2c <LoopFillZerobss>

08000a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a28:	f842 3b04 	str.w	r3, [r2], #4

08000a2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <LoopForever+0x16>)
	cmp	r2, r3
 8000a2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a30:	d3f9      	bcc.n	8000a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a32:	f002 fe13 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a36:	f7ff fd47 	bl	80004c8 <main>

08000a3a <LoopForever>:

LoopForever:
    b LoopForever
 8000a3a:	e7fe      	b.n	8000a3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a40:	08003724 	.word	0x08003724
	ldr	r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a48:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a4c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a50:	200000f8 	.word	0x200000f8

08000a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_2_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_Init+0x3c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0b      	ldr	r2, [pc, #44]	; (8000a94 <HAL_Init+0x3c>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6e:	2003      	movs	r0, #3
 8000a70:	f000 f920 	bl	8000cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f80f 	bl	8000a98 <HAL_InitTick>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	e001      	b.n	8000a8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a86:	f7ff feb3 	bl	80007f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40022000 	.word	0x40022000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_InitTick+0x6c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d023      	beq.n	8000af4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_InitTick+0x70>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_InitTick+0x6c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f91d 	bl	8000d02 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d809      	bhi.n	8000ae8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000adc:	f000 f8f5 	bl	8000cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_InitTick+0x74>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e007      	b.n	8000af8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e004      	b.n	8000af8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	73fb      	strb	r3, [r7, #15]
 8000af2:	e001      	b.n	8000af8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000004 	.word	0x20000004

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000008 	.word	0x20000008
 8000b34:	200000f4 	.word	0x200000f4

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200000f4 	.word	0x200000f4

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	db0a      	blt.n	8000bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <__NVIC_SetPriority+0x4c>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bdc:	e00a      	b.n	8000bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4908      	ldr	r1, [pc, #32]	; (8000c04 <__NVIC_SetPriority+0x50>)
 8000be4:	79fb      	ldrb	r3, [r7, #7]
 8000be6:	f003 030f 	and.w	r3, r3, #15
 8000bea:	3b04      	subs	r3, #4
 8000bec:	0112      	lsls	r2, r2, #4
 8000bee:	b2d2      	uxtb	r2, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	761a      	strb	r2, [r3, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b089      	sub	sp, #36	; 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	f1c3 0307 	rsb	r3, r3, #7
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	bf28      	it	cs
 8000c26:	2304      	movcs	r3, #4
 8000c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	2b06      	cmp	r3, #6
 8000c30:	d902      	bls.n	8000c38 <NVIC_EncodePriority+0x30>
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3b03      	subs	r3, #3
 8000c36:	e000      	b.n	8000c3a <NVIC_EncodePriority+0x32>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c40:	69bb      	ldr	r3, [r7, #24]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43da      	mvns	r2, r3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5a:	43d9      	mvns	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	4313      	orrs	r3, r2
         );
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3724      	adds	r7, #36	; 0x24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
	...

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c80:	d301      	bcc.n	8000c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00f      	b.n	8000ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <SysTick_Config+0x40>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8e:	210f      	movs	r1, #15
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	f7ff ff8e 	bl	8000bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <SysTick_Config+0x40>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9e:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <SysTick_Config+0x40>)
 8000ca0:	2207      	movs	r2, #7
 8000ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	e000e010 	.word	0xe000e010

08000cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff ff47 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b086      	sub	sp, #24
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	60b9      	str	r1, [r7, #8]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cdc:	f7ff ff5c 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000ce0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	68b9      	ldr	r1, [r7, #8]
 8000ce6:	6978      	ldr	r0, [r7, #20]
 8000ce8:	f7ff ff8e 	bl	8000c08 <NVIC_EncodePriority>
 8000cec:	4602      	mov	r2, r0
 8000cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf2:	4611      	mov	r1, r2
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff5d 	bl	8000bb4 <__NVIC_SetPriority>
}
 8000cfa:	bf00      	nop
 8000cfc:	3718      	adds	r7, #24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffb0 	bl	8000c70 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e17f      	b.n	800102c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8171 	beq.w	8001026 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d00b      	beq.n	8000d64 <HAL_GPIO_Init+0x48>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d007      	beq.n	8000d64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d58:	2b11      	cmp	r3, #17
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	2b12      	cmp	r3, #18
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	f003 0201 	and.w	r2, r3, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d118      	bne.n	8000e04 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	08db      	lsrs	r3, r3, #3
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x128>
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b12      	cmp	r3, #18
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	6939      	ldr	r1, [r7, #16]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80ac 	beq.w	8001026 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b5e      	ldr	r3, [pc, #376]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a5d      	ldr	r2, [pc, #372]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b5b      	ldr	r3, [pc, #364]	; (8001048 <HAL_GPIO_Init+0x32c>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ee6:	4a59      	ldr	r2, [pc, #356]	; (800104c <HAL_GPIO_Init+0x330>)
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x242>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4e      	ldr	r2, [pc, #312]	; (8001050 <HAL_GPIO_Init+0x334>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x23e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4d      	ldr	r2, [pc, #308]	; (8001054 <HAL_GPIO_Init+0x338>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x23a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4c      	ldr	r2, [pc, #304]	; (8001058 <HAL_GPIO_Init+0x33c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x236>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4b      	ldr	r2, [pc, #300]	; (800105c <HAL_GPIO_Init+0x340>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x232>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a4a      	ldr	r2, [pc, #296]	; (8001060 <HAL_GPIO_Init+0x344>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x22e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a49      	ldr	r2, [pc, #292]	; (8001064 <HAL_GPIO_Init+0x348>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x22a>
 8000f42:	2306      	movs	r3, #6
 8000f44:	e00c      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f46:	2307      	movs	r3, #7
 8000f48:	e00a      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x244>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f70:	4936      	ldr	r1, [pc, #216]	; (800104c <HAL_GPIO_Init+0x330>)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f7e:	4b3a      	ldr	r3, [pc, #232]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fa2:	4a31      	ldr	r2, [pc, #196]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fcc:	4a26      	ldr	r2, [pc, #152]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fd2:	4b25      	ldr	r3, [pc, #148]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_GPIO_Init+0x34c>)
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa22 f303 	lsr.w	r3, r2, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	f47f ae78 	bne.w	8000d2c <HAL_GPIO_Init+0x10>
  }
}
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	48001400 	.word	0x48001400
 8001064:	48001800 	.word	0x48001800
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691a      	ldr	r2, [r3, #16]
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	4013      	ands	r3, r2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e001      	b.n	800108e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b8:	e002      	b.n	80010c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e081      	b.n	80011e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d106      	bne.n	80010f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fba0 	bl	8000838 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2224      	movs	r2, #36	; 0x24
 80010fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0201 	bic.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800111c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800112c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d107      	bne.n	8001146 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e006      	b.n	8001154 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689a      	ldr	r2, [r3, #8]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001152:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d104      	bne.n	8001166 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001164:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001178:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68da      	ldr	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001188:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	ea42 0103 	orr.w	r1, r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	021a      	lsls	r2, r3, #8
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69d9      	ldr	r1, [r3, #28]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1a      	ldr	r2, [r3, #32]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 0201 	orr.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2220      	movs	r2, #32
 80011ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	817b      	strh	r3, [r7, #10]
 80011fc:	4613      	mov	r3, r2
 80011fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b20      	cmp	r3, #32
 800120a:	f040 80da 	bne.w	80013c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_I2C_Master_Transmit+0x30>
 8001218:	2302      	movs	r3, #2
 800121a:	e0d3      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001224:	f7ff fc88 	bl	8000b38 <HAL_GetTick>
 8001228:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2319      	movs	r3, #25
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 f8f0 	bl	800141c <I2C_WaitOnFlagUntilTimeout>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e0be      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2221      	movs	r2, #33	; 0x21
 800124a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2210      	movs	r2, #16
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	893a      	ldrh	r2, [r7, #8]
 8001266:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001272:	b29b      	uxth	r3, r3
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d90e      	bls.n	8001296 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	22ff      	movs	r2, #255	; 0xff
 800127c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001282:	b2da      	uxtb	r2, r3
 8001284:	8979      	ldrh	r1, [r7, #10]
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_I2C_Master_Transmit+0x1e0>)
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800128e:	68f8      	ldr	r0, [r7, #12]
 8001290:	f000 f9e6 	bl	8001660 <I2C_TransferConfig>
 8001294:	e06c      	b.n	8001370 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129a:	b29a      	uxth	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	8979      	ldrh	r1, [r7, #10]
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <HAL_I2C_Master_Transmit+0x1e0>)
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 f9d5 	bl	8001660 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80012b6:	e05b      	b.n	8001370 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	6a39      	ldr	r1, [r7, #32]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f8ed 	bl	800149c <I2C_WaitOnTXISFlagUntilTimeout>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e07b      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	1c5a      	adds	r2, r3, #1
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	3b01      	subs	r3, #1
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001300:	b29b      	uxth	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d034      	beq.n	8001370 <HAL_I2C_Master_Transmit+0x184>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800130a:	2b00      	cmp	r3, #0
 800130c:	d130      	bne.n	8001370 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	2200      	movs	r2, #0
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f87f 	bl	800141c <I2C_WaitOnFlagUntilTimeout>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e04d      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132c:	b29b      	uxth	r3, r3
 800132e:	2bff      	cmp	r3, #255	; 0xff
 8001330:	d90e      	bls.n	8001350 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	22ff      	movs	r2, #255	; 0xff
 8001336:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133c:	b2da      	uxtb	r2, r3
 800133e:	8979      	ldrh	r1, [r7, #10]
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f989 	bl	8001660 <I2C_TransferConfig>
 800134e:	e00f      	b.n	8001370 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135e:	b2da      	uxtb	r2, r3
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 f978 	bl	8001660 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d19e      	bne.n	80012b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f8cc 	bl	800151c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e01a      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2220      	movs	r2, #32
 8001394:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80013a2:	400b      	ands	r3, r1
 80013a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
  }
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	80002000 	.word	0x80002000
 80013d0:	fe00e800 	.word	0xfe00e800

080013d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d103      	bne.n	80013f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d007      	beq.n	8001410 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	619a      	str	r2, [r3, #24]
  }
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	4613      	mov	r3, r2
 800142a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800142c:	e022      	b.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001434:	d01e      	beq.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001436:	f7ff fb7f 	bl	8000b38 <HAL_GetTick>
 800143a:	4602      	mov	r2, r0
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d302      	bcc.n	800144c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d113      	bne.n	8001474 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	f043 0220 	orr.w	r2, r3, #32
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2220      	movs	r2, #32
 800145c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e00f      	b.n	8001494 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	4013      	ands	r3, r2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	461a      	mov	r2, r3
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	429a      	cmp	r2, r3
 8001490:	d0cd      	beq.n	800142e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014a8:	e02c      	b.n	8001504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	68f8      	ldr	r0, [r7, #12]
 80014b0:	f000 f870 	bl	8001594 <I2C_IsAcknowledgeFailed>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e02a      	b.n	8001514 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014c4:	d01e      	beq.n	8001504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014c6:	f7ff fb37 	bl	8000b38 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d302      	bcc.n	80014dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d113      	bne.n	8001504 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f043 0220 	orr.w	r2, r3, #32
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2220      	movs	r2, #32
 80014ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e007      	b.n	8001514 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d1cb      	bne.n	80014aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001528:	e028      	b.n	800157c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 f830 	bl	8001594 <I2C_IsAcknowledgeFailed>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e026      	b.n	800158c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800153e:	f7ff fafb 	bl	8000b38 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	429a      	cmp	r2, r3
 800154c:	d302      	bcc.n	8001554 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d113      	bne.n	800157c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2220      	movs	r2, #32
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e007      	b.n	800158c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0320 	and.w	r3, r3, #32
 8001586:	2b20      	cmp	r3, #32
 8001588:	d1cf      	bne.n	800152a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699b      	ldr	r3, [r3, #24]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	d151      	bne.n	8001652 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ae:	e022      	b.n	80015f6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015b6:	d01e      	beq.n	80015f6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b8:	f7ff fabe 	bl	8000b38 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d302      	bcc.n	80015ce <I2C_IsAcknowledgeFailed+0x3a>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d113      	bne.n	80015f6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f043 0220 	orr.w	r2, r3, #32
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2220      	movs	r2, #32
 80015de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e02e      	b.n	8001654 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	2b20      	cmp	r3, #32
 8001602:	d1d5      	bne.n	80015b0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2210      	movs	r2, #16
 800160a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2220      	movs	r2, #32
 8001612:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fedd 	bl	80013d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b0d      	ldr	r3, [pc, #52]	; (800165c <I2C_IsAcknowledgeFailed+0xc8>)
 8001626:	400b      	ands	r3, r1
 8001628:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f043 0204 	orr.w	r2, r3, #4
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2220      	movs	r2, #32
 800163a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	fe00e800 	.word	0xfe00e800

08001660 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	817b      	strh	r3, [r7, #10]
 800166e:	4613      	mov	r3, r2
 8001670:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	0d5b      	lsrs	r3, r3, #21
 800167c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <I2C_TransferConfig+0x58>)
 8001682:	430b      	orrs	r3, r1
 8001684:	43db      	mvns	r3, r3
 8001686:	ea02 0103 	and.w	r1, r2, r3
 800168a:	897b      	ldrh	r3, [r7, #10]
 800168c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001690:	7a7b      	ldrb	r3, [r7, #9]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	431a      	orrs	r2, r3
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	03ff63ff 	.word	0x03ff63ff

080016bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d138      	bne.n	8001744 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016dc:	2302      	movs	r3, #2
 80016de:	e032      	b.n	8001746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	; 0x24
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800170e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6819      	ldr	r1, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0201 	orr.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2220      	movs	r2, #32
 8001734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001752:	b480      	push	{r7}
 8001754:	b085      	sub	sp, #20
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b20      	cmp	r3, #32
 8001766:	d139      	bne.n	80017dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001772:	2302      	movs	r3, #2
 8001774:	e033      	b.n	80017de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2224      	movs	r2, #36	; 0x24
 8001782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	021b      	lsls	r3, r3, #8
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0201 	orr.w	r2, r2, #1
 80017c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2220      	movs	r2, #32
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40007000 	.word	0x40007000

08001808 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001816:	d130      	bne.n	800187a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001824:	d038      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182e:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001830:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001834:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001836:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2232      	movs	r2, #50	; 0x32
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001842:	fba2 2303 	umull	r2, r3, r2, r3
 8001846:	0c9b      	lsrs	r3, r3, #18
 8001848:	3301      	adds	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184c:	e002      	b.n	8001854 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	3b01      	subs	r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001860:	d102      	bne.n	8001868 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f2      	bne.n	800184e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001874:	d110      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e00f      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d007      	beq.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001888:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001890:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001896:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000000 	.word	0x20000000
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b088      	sub	sp, #32
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e3d4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4ba1      	ldr	r3, [pc, #644]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d0:	4b9e      	ldr	r3, [pc, #632]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80e4 	beq.w	8001ab0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_RCC_OscConfig+0x4a>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b0c      	cmp	r3, #12
 80018f2:	f040 808b 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 8087 	bne.w	8001a0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018fe:	4b93      	ldr	r3, [pc, #588]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x62>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e3ac      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a1a      	ldr	r2, [r3, #32]
 800191a:	4b8c      	ldr	r3, [pc, #560]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_RCC_OscConfig+0x7c>
 8001926:	4b89      	ldr	r3, [pc, #548]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192e:	e005      	b.n	800193c <HAL_RCC_OscConfig+0x88>
 8001930:	4b86      	ldr	r3, [pc, #536]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001936:	091b      	lsrs	r3, r3, #4
 8001938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193c:	4293      	cmp	r3, r2
 800193e:	d223      	bcs.n	8001988 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fd3f 	bl	80023c8 <RCC_SetFlashLatencyFromMSIRange>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e38d      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001954:	4b7d      	ldr	r3, [pc, #500]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a7c      	ldr	r2, [pc, #496]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800195a:	f043 0308 	orr.w	r3, r3, #8
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b7a      	ldr	r3, [pc, #488]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4977      	ldr	r1, [pc, #476]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001972:	4b76      	ldr	r3, [pc, #472]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	4972      	ldr	r1, [pc, #456]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
 8001986:	e025      	b.n	80019d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001988:	4b70      	ldr	r3, [pc, #448]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6f      	ldr	r2, [pc, #444]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b6d      	ldr	r3, [pc, #436]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	496a      	ldr	r1, [pc, #424]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a6:	4b69      	ldr	r3, [pc, #420]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4965      	ldr	r1, [pc, #404]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fcff 	bl	80023c8 <RCC_SetFlashLatencyFromMSIRange>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e34d      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d4:	f000 fc36 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80019d8:	4601      	mov	r1, r0
 80019da:	4b5c      	ldr	r3, [pc, #368]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	4a5a      	ldr	r2, [pc, #360]	; (8001b50 <HAL_RCC_OscConfig+0x29c>)
 80019e6:	5cd3      	ldrb	r3, [r2, r3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa21 f303 	lsr.w	r3, r1, r3
 80019f0:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <HAL_RCC_OscConfig+0x2a0>)
 80019f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f4:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <HAL_RCC_OscConfig+0x2a4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff f84d 	bl	8000a98 <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d052      	beq.n	8001aae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	e331      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d032      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f88a 	bl	8000b38 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a28:	f7ff f886 	bl	8000b38 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e31a      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	4b41      	ldr	r3, [pc, #260]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a40      	ldr	r2, [pc, #256]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	493b      	ldr	r1, [pc, #236]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a64:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	4936      	ldr	r1, [pc, #216]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
 8001a78:	e01a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001a80:	f023 0301 	bic.w	r3, r3, #1
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f857 	bl	8000b38 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f853 	bl	8000b38 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e2e7      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1da>
 8001aac:	e000      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d074      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x21a>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b0c      	cmp	r3, #12
 8001ac6:	d10e      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d064      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d160      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e2c4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x24a>
 8001af0:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e01d      	b.n	8001b3a <HAL_RCC_OscConfig+0x286>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b06:	d10c      	bne.n	8001b22 <HAL_RCC_OscConfig+0x26e>
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	e00b      	b.n	8001b3a <HAL_RCC_OscConfig+0x286>
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a09      	ldr	r2, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_RCC_OscConfig+0x298>)
 8001b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01c      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b42:	f7fe fff9 	bl	8000b38 <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b48:	e011      	b.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	080036cc 	.word	0x080036cc
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7fe ffec 	bl	8000b38 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e280      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	4baf      	ldr	r3, [pc, #700]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x2a8>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7fe ffdc 	bl	8000b38 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7fe ffd8 	bl	8000b38 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e26c      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b96:	4ba5      	ldr	r3, [pc, #660]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x2d0>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d060      	beq.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b04      	cmp	r3, #4
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x310>
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d116      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc4:	4b99      	ldr	r3, [pc, #612]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_OscConfig+0x328>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e249      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bdc:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	061b      	lsls	r3, r3, #24
 8001bea:	4990      	ldr	r1, [pc, #576]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf0:	e040      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d023      	beq.n	8001c42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfa:	4b8c      	ldr	r3, [pc, #560]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a8b      	ldr	r2, [pc, #556]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7fe ff97 	bl	8000b38 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7fe ff93 	bl	8000b38 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e227      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b82      	ldr	r3, [pc, #520]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b7f      	ldr	r3, [pc, #508]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	061b      	lsls	r3, r3, #24
 8001c3a:	497c      	ldr	r1, [pc, #496]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	e018      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c42:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a79      	ldr	r2, [pc, #484]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe ff73 	bl	8000b38 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe ff6f 	bl	8000b38 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e203      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d03c      	beq.n	8001cfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c88:	4b68      	ldr	r3, [pc, #416]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	4a67      	ldr	r2, [pc, #412]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7fe ff4e 	bl	8000b38 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7fe ff4a 	bl	8000b38 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1de      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb2:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0ef      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x3ec>
 8001cc0:	e01b      	b.n	8001cfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b5a      	ldr	r3, [pc, #360]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7fe ff31 	bl	8000b38 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7fe ff2d 	bl	8000b38 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1c1      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cec:	4b4f      	ldr	r3, [pc, #316]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ef      	bne.n	8001cda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	f000 80a6 	beq.w	8001e54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1c:	4a43      	ldr	r2, [pc, #268]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d22:	6593      	str	r3, [r2, #88]	; 0x58
 8001d24:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d30:	2301      	movs	r3, #1
 8001d32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d118      	bne.n	8001d72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d40:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a3a      	ldr	r2, [pc, #232]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe fef4 	bl	8000b38 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d54:	f7fe fef0 	bl	8000b38 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e184      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <HAL_RCC_OscConfig+0x57c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_RCC_OscConfig+0x4d8>
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d80:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8a:	e024      	b.n	8001dd6 <HAL_RCC_OscConfig+0x522>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d110      	bne.n	8001db6 <HAL_RCC_OscConfig+0x502>
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	4a20      	ldr	r2, [pc, #128]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db4:	e00f      	b.n	8001dd6 <HAL_RCC_OscConfig+0x522>
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f023 0301 	bic.w	r3, r3, #1
 8001dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d016      	beq.n	8001e0c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7fe feab 	bl	8000b38 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7fe fea7 	bl	8000b38 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e139      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_OscConfig+0x578>)
 8001dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0ed      	beq.n	8001de6 <HAL_RCC_OscConfig+0x532>
 8001e0a:	e01a      	b.n	8001e42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0c:	f7fe fe94 	bl	8000b38 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e14:	f7fe fe90 	bl	8000b38 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d906      	bls.n	8001e34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e122      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e34:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1e8      	bne.n	8001e14 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e42:	7ffb      	ldrb	r3, [r7, #31]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a8a      	ldr	r2, [pc, #552]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8108 	beq.w	800206e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 80d0 	bne.w	8002008 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e68:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d130      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	3b01      	subs	r3, #1
 8001e88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d127      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d11f      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea8:	2a07      	cmp	r2, #7
 8001eaa:	bf14      	ite	ne
 8001eac:	2201      	movne	r2, #1
 8001eae:	2200      	moveq	r2, #0
 8001eb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d113      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d06e      	beq.n	8001fbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2b0c      	cmp	r3, #12
 8001ee2:	d069      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee4:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b7      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f00:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5c      	ldr	r2, [pc, #368]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f0c:	f7fe fe14 	bl	8000b38 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7fe fe10 	bl	8000b38 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e0a4      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f26:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f32:	4b51      	ldr	r3, [pc, #324]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <HAL_RCC_OscConfig+0x7c8>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f42:	3a01      	subs	r2, #1
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f4c:	0212      	lsls	r2, r2, #8
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f54:	0852      	lsrs	r2, r2, #1
 8001f56:	3a01      	subs	r2, #1
 8001f58:	0552      	lsls	r2, r2, #21
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f60:	0852      	lsrs	r2, r2, #1
 8001f62:	3a01      	subs	r2, #1
 8001f64:	0652      	lsls	r2, r2, #25
 8001f66:	4311      	orrs	r1, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f6c:	0912      	lsrs	r2, r2, #4
 8001f6e:	0452      	lsls	r2, r2, #17
 8001f70:	430a      	orrs	r2, r1
 8001f72:	4941      	ldr	r1, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f90:	f7fe fdd2 	bl	8000b38 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7fe fdce 	bl	8000b38 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e062      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001faa:	4b33      	ldr	r3, [pc, #204]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0f0      	beq.n	8001f98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fb6:	e05a      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e059      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d152      	bne.n	800206e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd4:	4b28      	ldr	r3, [pc, #160]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe0:	f7fe fdaa 	bl	8000b38 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe fda6 	bl	8000b38 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e03a      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x734>
 8002006:	e032      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d02d      	beq.n	800206a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002018:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800201a:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002026:	4b14      	ldr	r3, [pc, #80]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 8002038:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800203c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002040:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe fd79 	bl	8000b38 <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204a:	f7fe fd75 	bl	8000b38 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e009      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f0      	bne.n	800204a <HAL_RCC_OscConfig+0x796>
 8002068:	e001      	b.n	800206e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	f99d808c 	.word	0xf99d808c

08002080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0c8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002094:	4b66      	ldr	r3, [pc, #408]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d910      	bls.n	80020c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 0207 	bic.w	r2, r3, #7
 80020aa:	4961      	ldr	r1, [pc, #388]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d04c      	beq.n	800216a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d121      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e09e      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d107      	bne.n	8002100 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e092      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002108:	4b4a      	ldr	r3, [pc, #296]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d109      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e086      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002118:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e07e      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002128:	4b42      	ldr	r3, [pc, #264]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 0203 	bic.w	r2, r3, #3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	493f      	ldr	r1, [pc, #252]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800213a:	f7fe fcfd 	bl	8000b38 <HAL_GetTick>
 800213e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002140:	e00a      	b.n	8002158 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002142:	f7fe fcf9 	bl	8000b38 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002150:	4293      	cmp	r3, r2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e066      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 020c 	and.w	r2, r3, #12
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	429a      	cmp	r2, r3
 8002168:	d1eb      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d008      	beq.n	8002188 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	492c      	ldr	r1, [pc, #176]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b29      	ldr	r3, [pc, #164]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4924      	ldr	r1, [pc, #144]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1b0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e036      	b.n	8002226 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4918      	ldr	r1, [pc, #96]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021e2:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4910      	ldr	r1, [pc, #64]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021f6:	f000 f825 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <HAL_RCC_ClockConfig+0x1b8>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	fa21 f303 	lsr.w	r3, r1, r3
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1c0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fc3c 	bl	8000a98 <HAL_InitTick>
 8002220:	4603      	mov	r3, r0
 8002222:	72fb      	strb	r3, [r7, #11]

  return status;
 8002224:	7afb      	ldrb	r3, [r7, #11]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	080036cc 	.word	0x080036cc
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
 800224e:	2300      	movs	r3, #0
 8002250:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800225c:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x34>
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b0c      	cmp	r3, #12
 8002270:	d121      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d11e      	bne.n	80022b6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002278:	4b33      	ldr	r3, [pc, #204]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	e005      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10d      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d102      	bne.n	80022c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	e004      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c8:	4b22      	ldr	r3, [pc, #136]	; (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d133      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022d2:	4b1d      	ldr	r3, [pc, #116]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d002      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0xa4>
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d003      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0xaa>
 80022e6:	e005      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ea:	617b      	str	r3, [r7, #20]
      break;
 80022ec:	e005      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_GetSysClockFreq+0x110>)
 80022f0:	617b      	str	r3, [r7, #20]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	617b      	str	r3, [r7, #20]
      break;
 80022f8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	3301      	adds	r3, #1
 8002306:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	fb02 f203 	mul.w	r2, r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <HAL_RCC_GetSysClockFreq+0x104>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0e5b      	lsrs	r3, r3, #25
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800233a:	69bb      	ldr	r3, [r7, #24]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3724      	adds	r7, #36	; 0x24
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40021000 	.word	0x40021000
 800234c:	080036e4 	.word	0x080036e4
 8002350:	00f42400 	.word	0x00f42400
 8002354:	007a1200 	.word	0x007a1200

08002358 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_RCC_GetHCLKFreq+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000000 	.word	0x20000000

08002370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002374:	f7ff fff0 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 8002378:	4601      	mov	r1, r0
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	f003 031f 	and.w	r3, r3, #31
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	080036dc 	.word	0x080036dc

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023a0:	f7ff ffda 	bl	8002358 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000
 80023c4:	080036dc 	.word	0x080036dc

080023c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023e0:	f7ff fa04 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 80023e4:	6178      	str	r0, [r7, #20]
 80023e6:	e014      	b.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	4a24      	ldr	r2, [pc, #144]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6593      	str	r3, [r2, #88]	; 0x58
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002400:	f7ff f9f4 	bl	80017ec <HAL_PWREx_GetVoltageRange>
 8002404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002410:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002418:	d10b      	bne.n	8002432 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b80      	cmp	r3, #128	; 0x80
 800241e:	d919      	bls.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2ba0      	cmp	r3, #160	; 0xa0
 8002424:	d902      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002426:	2302      	movs	r3, #2
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	e013      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	e010      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d902      	bls.n	800243e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002438:	2303      	movs	r3, #3
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	e00a      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d102      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002444:	2302      	movs	r3, #2
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e004      	b.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b70      	cmp	r3, #112	; 0x70
 800244e:	d101      	bne.n	8002454 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	4909      	ldr	r1, [pc, #36]	; (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002464:	4b07      	ldr	r3, [pc, #28]	; (8002484 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40021000 	.word	0x40021000
 8002484:	40022000 	.word	0x40022000

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002490:	2300      	movs	r3, #0
 8002492:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002494:	2300      	movs	r3, #0
 8002496:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d03f      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ac:	d01c      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b2:	d802      	bhi.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00e      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024b8:	e01f      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024be:	d003      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024c4:	d01c      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024c6:	e018      	b.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024c8:	4b85      	ldr	r3, [pc, #532]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a84      	ldr	r2, [pc, #528]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d4:	e015      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3304      	adds	r3, #4
 80024da:	2100      	movs	r1, #0
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fab9 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024e6:	e00c      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3320      	adds	r3, #32
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fba0 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 80024f4:	4603      	mov	r3, r0
 80024f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024f8:	e003      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	74fb      	strb	r3, [r7, #19]
      break;
 80024fe:	e000      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10b      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002508:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002516:	4972      	ldr	r1, [pc, #456]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800251e:	e001      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d03f      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d01c      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800253a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253e:	d802      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00e      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002544:	e01f      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800254a:	d003      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800254c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002550:	d01c      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002552:	e018      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002554:	4b62      	ldr	r3, [pc, #392]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a61      	ldr	r2, [pc, #388]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002560:	e015      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fa73 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 800256e:	4603      	mov	r3, r0
 8002570:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002572:	e00c      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3320      	adds	r3, #32
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fb5a 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002584:	e003      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	74fb      	strb	r3, [r7, #19]
      break;
 800258a:	e000      	b.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800258c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800258e:	7cfb      	ldrb	r3, [r7, #19]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002594:	4b52      	ldr	r3, [pc, #328]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025a2:	494f      	ldr	r1, [pc, #316]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025aa:	e001      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a0 	beq.w	80026fe <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025c2:	4b47      	ldr	r3, [pc, #284]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b41      	ldr	r3, [pc, #260]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a40      	ldr	r2, [pc, #256]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b3e      	ldr	r3, [pc, #248]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a3a      	ldr	r2, [pc, #232]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80025fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002600:	f7fe fa9a 	bl	8000b38 <HAL_GetTick>
 8002604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002606:	e009      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002608:	f7fe fa96 	bl	8000b38 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d902      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	74fb      	strb	r3, [r7, #19]
        break;
 800261a:	e005      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800261c:	4b31      	ldr	r3, [pc, #196]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0ef      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002628:	7cfb      	ldrb	r3, [r7, #19]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d15c      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800262e:	4b2c      	ldr	r3, [pc, #176]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01f      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	d019      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800264c:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268a:	f7fe fa55 	bl	8000b38 <HAL_GetTick>
 800268e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002690:	e00b      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fa51 	bl	8000b38 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d902      	bls.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	74fb      	strb	r3, [r7, #19]
            break;
 80026a8:	e006      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026aa:	4b0d      	ldr	r3, [pc, #52]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ec      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ce:	4904      	ldr	r1, [pc, #16]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026d6:	e009      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026d8:	7cfb      	ldrb	r3, [r7, #19]
 80026da:	74bb      	strb	r3, [r7, #18]
 80026dc:	e006      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x264>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	7cfb      	ldrb	r3, [r7, #19]
 80026ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ec:	7c7b      	ldrb	r3, [r7, #17]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f2:	4b9e      	ldr	r3, [pc, #632]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f6:	4a9d      	ldr	r2, [pc, #628]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00a      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800270a:	4b98      	ldr	r3, [pc, #608]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002710:	f023 0203 	bic.w	r2, r3, #3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002718:	4994      	ldr	r1, [pc, #592]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00a      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800272c:	4b8f      	ldr	r3, [pc, #572]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 020c 	bic.w	r2, r3, #12
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	498c      	ldr	r1, [pc, #560]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800274e:	4b87      	ldr	r3, [pc, #540]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4983      	ldr	r1, [pc, #524]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800275e:	4313      	orrs	r3, r2
 8002760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002770:	4b7e      	ldr	r3, [pc, #504]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	497b      	ldr	r1, [pc, #492]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002792:	4b76      	ldr	r3, [pc, #472]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002798:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	4972      	ldr	r1, [pc, #456]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00a      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027b4:	4b6d      	ldr	r3, [pc, #436]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c2:	496a      	ldr	r1, [pc, #424]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027d6:	4b65      	ldr	r3, [pc, #404]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	4961      	ldr	r1, [pc, #388]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027f8:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	4959      	ldr	r1, [pc, #356]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800281a:	4b54      	ldr	r3, [pc, #336]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	4950      	ldr	r1, [pc, #320]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002842:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	4948      	ldr	r1, [pc, #288]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800285e:	4b43      	ldr	r3, [pc, #268]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	493f      	ldr	r1, [pc, #252]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d028      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002880:	4b3a      	ldr	r3, [pc, #232]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002886:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800288e:	4937      	ldr	r1, [pc, #220]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800289a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800289e:	d106      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a31      	ldr	r2, [pc, #196]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
 80028ac:	e011      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b6:	d10c      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3304      	adds	r3, #4
 80028bc:	2101      	movs	r1, #1
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 f8c8 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d028      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028de:	4b23      	ldr	r3, [pc, #140]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	491f      	ldr	r1, [pc, #124]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fc:	d106      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4a1a      	ldr	r2, [pc, #104]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002908:	60d3      	str	r3, [r2, #12]
 800290a:	e011      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	3304      	adds	r3, #4
 800291a:	2101      	movs	r1, #1
 800291c:	4618      	mov	r0, r3
 800291e:	f000 f899 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 8002922:	4603      	mov	r3, r0
 8002924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002926:	7cfb      	ldrb	r3, [r7, #19]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02b      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800293c:	4b0b      	ldr	r3, [pc, #44]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002942:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800295a:	d109      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a02      	ldr	r2, [pc, #8]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002966:	60d3      	str	r3, [r2, #12]
 8002968:	e014      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002978:	d10c      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2101      	movs	r1, #1
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f867 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02f      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029a0:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ae:	4928      	ldr	r1, [pc, #160]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029be:	d10d      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	2102      	movs	r1, #2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f844 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d014      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	74bb      	strb	r3, [r7, #18]
 80029da:	e011      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3320      	adds	r3, #32
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f921 	bl	8002c34 <RCCEx_PLLSAI2_Config>
 80029f2:	4603      	mov	r3, r0
 80029f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029f6:	7cfb      	ldrb	r3, [r7, #19]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1a:	490d      	ldr	r1, [pc, #52]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00b      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a3e:	4904      	ldr	r1, [pc, #16]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a46:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40021000 	.word	0x40021000

08002a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a62:	4b73      	ldr	r3, [pc, #460]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d018      	beq.n	8002aa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a6e:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10d      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
       ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
       ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d044      	beq.n	8002b24 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e041      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d00c      	beq.n	8002ac2 <RCCEx_PLLSAI1_Config+0x6e>
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d013      	beq.n	8002ad4 <RCCEx_PLLSAI1_Config+0x80>
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d120      	bne.n	8002af2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ab0:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11d      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac0:	e01a      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac2:	4b5b      	ldr	r3, [pc, #364]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d116      	bne.n	8002afc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad2:	e013      	b.n	8002afc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ad4:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002af0:	e006      	b.n	8002b00 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
      break;
 8002af6:	e004      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002af8:	bf00      	nop
 8002afa:	e002      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002afc:	bf00      	nop
 8002afe:	e000      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002b00:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10d      	bne.n	8002b24 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6819      	ldr	r1, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	4944      	ldr	r1, [pc, #272]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d17d      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a40      	ldr	r2, [pc, #256]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b36:	f7fd ffff 	bl	8000b38 <HAL_GetTick>
 8002b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b3c:	e009      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b3e:	f7fd fffb 	bl	8000b38 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d902      	bls.n	8002b52 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	73fb      	strb	r3, [r7, #15]
        break;
 8002b50:	e005      	b.n	8002b5e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b52:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1ef      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d160      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d111      	bne.n	8002b8e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	0211      	lsls	r1, r2, #8
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68d2      	ldr	r2, [r2, #12]
 8002b80:	0912      	lsrs	r2, r2, #4
 8002b82:	0452      	lsls	r2, r2, #17
 8002b84:	430a      	orrs	r2, r1
 8002b86:	492a      	ldr	r1, [pc, #168]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	610b      	str	r3, [r1, #16]
 8002b8c:	e027      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d112      	bne.n	8002bba <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002b9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6892      	ldr	r2, [r2, #8]
 8002ba4:	0211      	lsls	r1, r2, #8
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6912      	ldr	r2, [r2, #16]
 8002baa:	0852      	lsrs	r2, r2, #1
 8002bac:	3a01      	subs	r2, #1
 8002bae:	0552      	lsls	r2, r2, #21
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	491f      	ldr	r1, [pc, #124]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	610b      	str	r3, [r1, #16]
 8002bb8:	e011      	b.n	8002bde <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bc2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	0211      	lsls	r1, r2, #8
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6952      	ldr	r2, [r2, #20]
 8002bd0:	0852      	lsrs	r2, r2, #1
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	0652      	lsls	r2, r2, #25
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	4915      	ldr	r1, [pc, #84]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002be8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fd ffa5 	bl	8000b38 <HAL_GetTick>
 8002bee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf0:	e009      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf2:	f7fd ffa1 	bl	8000b38 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d902      	bls.n	8002c06 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	73fb      	strb	r3, [r7, #15]
          break;
 8002c04:	e005      	b.n	8002c12 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ef      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4903      	ldr	r1, [pc, #12]	; (8002c30 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000

08002c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c42:	4b68      	ldr	r3, [pc, #416]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	f003 0303 	and.w	r3, r3, #3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d018      	beq.n	8002c80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c4e:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0203 	and.w	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d10d      	bne.n	8002c7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
       ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
       ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d044      	beq.n	8002d04 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e041      	b.n	8002d04 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d00c      	beq.n	8002ca2 <RCCEx_PLLSAI2_Config+0x6e>
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d013      	beq.n	8002cb4 <RCCEx_PLLSAI2_Config+0x80>
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d120      	bne.n	8002cd2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c90:	4b54      	ldr	r3, [pc, #336]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d11d      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ca0:	e01a      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca2:	4b50      	ldr	r3, [pc, #320]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d116      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb2:	e013      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cb4:	4b4b      	ldr	r3, [pc, #300]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cd0:	e006      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd6:	e004      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e002      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ce0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ce8:	4b3e      	ldr	r3, [pc, #248]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	4939      	ldr	r1, [pc, #228]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d167      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d0a:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a35      	ldr	r2, [pc, #212]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d16:	f7fd ff0f 	bl	8000b38 <HAL_GetTick>
 8002d1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d1c:	e009      	b.n	8002d32 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d1e:	f7fd ff0b 	bl	8000b38 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d902      	bls.n	8002d32 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	73fb      	strb	r3, [r7, #15]
        break;
 8002d30:	e005      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1ef      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d14a      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d111      	bne.n	8002d6e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6892      	ldr	r2, [r2, #8]
 8002d5a:	0211      	lsls	r1, r2, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	0912      	lsrs	r2, r2, #4
 8002d62:	0452      	lsls	r2, r2, #17
 8002d64:	430a      	orrs	r2, r1
 8002d66:	491f      	ldr	r1, [pc, #124]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	614b      	str	r3, [r1, #20]
 8002d6c:	e011      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	0211      	lsls	r1, r2, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6912      	ldr	r2, [r2, #16]
 8002d84:	0852      	lsrs	r2, r2, #1
 8002d86:	3a01      	subs	r2, #1
 8002d88:	0652      	lsls	r2, r2, #25
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	4915      	ldr	r1, [pc, #84]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d92:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9e:	f7fd fecb 	bl	8000b38 <HAL_GetTick>
 8002da2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da4:	e009      	b.n	8002dba <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da6:	f7fd fec7 	bl	8000b38 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d902      	bls.n	8002dba <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	73fb      	strb	r3, [r7, #15]
          break;
 8002db8:	e005      	b.n	8002dc6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0ef      	beq.n	8002da6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d106      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40021000 	.word	0x40021000

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e040      	b.n	8002e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fd fd58 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	; 0x24
 8002e14:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f82c 	bl	8002e84 <UART_SetConfig>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e022      	b.n	8002e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 faaa 	bl	8003398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fb31 	bl	80034dc <UART_CheckIdleState>
 8002e7a:	4603      	mov	r3, r0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e84:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e88:	b088      	sub	sp, #32
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4bac      	ldr	r3, [pc, #688]	; (8003164 <UART_SetConfig+0x2e0>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	69f9      	ldr	r1, [r7, #28]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68da      	ldr	r2, [r3, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4aa2      	ldr	r2, [pc, #648]	; (8003168 <UART_SetConfig+0x2e4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a99      	ldr	r2, [pc, #612]	; (800316c <UART_SetConfig+0x2e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d121      	bne.n	8002f50 <UART_SetConfig+0xcc>
 8002f0c:	4b98      	ldr	r3, [pc, #608]	; (8003170 <UART_SetConfig+0x2ec>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d816      	bhi.n	8002f48 <UART_SetConfig+0xc4>
 8002f1a:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <UART_SetConfig+0x9c>)
 8002f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f20:	08002f31 	.word	0x08002f31
 8002f24:	08002f3d 	.word	0x08002f3d
 8002f28:	08002f37 	.word	0x08002f37
 8002f2c:	08002f43 	.word	0x08002f43
 8002f30:	2301      	movs	r3, #1
 8002f32:	76fb      	strb	r3, [r7, #27]
 8002f34:	e0e8      	b.n	8003108 <UART_SetConfig+0x284>
 8002f36:	2302      	movs	r3, #2
 8002f38:	76fb      	strb	r3, [r7, #27]
 8002f3a:	e0e5      	b.n	8003108 <UART_SetConfig+0x284>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	76fb      	strb	r3, [r7, #27]
 8002f40:	e0e2      	b.n	8003108 <UART_SetConfig+0x284>
 8002f42:	2308      	movs	r3, #8
 8002f44:	76fb      	strb	r3, [r7, #27]
 8002f46:	e0df      	b.n	8003108 <UART_SetConfig+0x284>
 8002f48:	2310      	movs	r3, #16
 8002f4a:	76fb      	strb	r3, [r7, #27]
 8002f4c:	bf00      	nop
 8002f4e:	e0db      	b.n	8003108 <UART_SetConfig+0x284>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a87      	ldr	r2, [pc, #540]	; (8003174 <UART_SetConfig+0x2f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d134      	bne.n	8002fc4 <UART_SetConfig+0x140>
 8002f5a:	4b85      	ldr	r3, [pc, #532]	; (8003170 <UART_SetConfig+0x2ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f60:	f003 030c 	and.w	r3, r3, #12
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	d829      	bhi.n	8002fbc <UART_SetConfig+0x138>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <UART_SetConfig+0xec>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fa5 	.word	0x08002fa5
 8002f74:	08002fbd 	.word	0x08002fbd
 8002f78:	08002fbd 	.word	0x08002fbd
 8002f7c:	08002fbd 	.word	0x08002fbd
 8002f80:	08002fb1 	.word	0x08002fb1
 8002f84:	08002fbd 	.word	0x08002fbd
 8002f88:	08002fbd 	.word	0x08002fbd
 8002f8c:	08002fbd 	.word	0x08002fbd
 8002f90:	08002fab 	.word	0x08002fab
 8002f94:	08002fbd 	.word	0x08002fbd
 8002f98:	08002fbd 	.word	0x08002fbd
 8002f9c:	08002fbd 	.word	0x08002fbd
 8002fa0:	08002fb7 	.word	0x08002fb7
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	76fb      	strb	r3, [r7, #27]
 8002fa8:	e0ae      	b.n	8003108 <UART_SetConfig+0x284>
 8002faa:	2302      	movs	r3, #2
 8002fac:	76fb      	strb	r3, [r7, #27]
 8002fae:	e0ab      	b.n	8003108 <UART_SetConfig+0x284>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	76fb      	strb	r3, [r7, #27]
 8002fb4:	e0a8      	b.n	8003108 <UART_SetConfig+0x284>
 8002fb6:	2308      	movs	r3, #8
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e0a5      	b.n	8003108 <UART_SetConfig+0x284>
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	bf00      	nop
 8002fc2:	e0a1      	b.n	8003108 <UART_SetConfig+0x284>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <UART_SetConfig+0x2f4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d120      	bne.n	8003010 <UART_SetConfig+0x18c>
 8002fce:	4b68      	ldr	r3, [pc, #416]	; (8003170 <UART_SetConfig+0x2ec>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d00f      	beq.n	8002ffc <UART_SetConfig+0x178>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d802      	bhi.n	8002fe6 <UART_SetConfig+0x162>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <UART_SetConfig+0x16c>
 8002fe4:	e010      	b.n	8003008 <UART_SetConfig+0x184>
 8002fe6:	2b20      	cmp	r3, #32
 8002fe8:	d005      	beq.n	8002ff6 <UART_SetConfig+0x172>
 8002fea:	2b30      	cmp	r3, #48	; 0x30
 8002fec:	d009      	beq.n	8003002 <UART_SetConfig+0x17e>
 8002fee:	e00b      	b.n	8003008 <UART_SetConfig+0x184>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	76fb      	strb	r3, [r7, #27]
 8002ff4:	e088      	b.n	8003108 <UART_SetConfig+0x284>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	76fb      	strb	r3, [r7, #27]
 8002ffa:	e085      	b.n	8003108 <UART_SetConfig+0x284>
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	76fb      	strb	r3, [r7, #27]
 8003000:	e082      	b.n	8003108 <UART_SetConfig+0x284>
 8003002:	2308      	movs	r3, #8
 8003004:	76fb      	strb	r3, [r7, #27]
 8003006:	e07f      	b.n	8003108 <UART_SetConfig+0x284>
 8003008:	2310      	movs	r3, #16
 800300a:	76fb      	strb	r3, [r7, #27]
 800300c:	bf00      	nop
 800300e:	e07b      	b.n	8003108 <UART_SetConfig+0x284>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a59      	ldr	r2, [pc, #356]	; (800317c <UART_SetConfig+0x2f8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d120      	bne.n	800305c <UART_SetConfig+0x1d8>
 800301a:	4b55      	ldr	r3, [pc, #340]	; (8003170 <UART_SetConfig+0x2ec>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d00f      	beq.n	8003048 <UART_SetConfig+0x1c4>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d802      	bhi.n	8003032 <UART_SetConfig+0x1ae>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <UART_SetConfig+0x1b8>
 8003030:	e010      	b.n	8003054 <UART_SetConfig+0x1d0>
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d005      	beq.n	8003042 <UART_SetConfig+0x1be>
 8003036:	2bc0      	cmp	r3, #192	; 0xc0
 8003038:	d009      	beq.n	800304e <UART_SetConfig+0x1ca>
 800303a:	e00b      	b.n	8003054 <UART_SetConfig+0x1d0>
 800303c:	2300      	movs	r3, #0
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	e062      	b.n	8003108 <UART_SetConfig+0x284>
 8003042:	2302      	movs	r3, #2
 8003044:	76fb      	strb	r3, [r7, #27]
 8003046:	e05f      	b.n	8003108 <UART_SetConfig+0x284>
 8003048:	2304      	movs	r3, #4
 800304a:	76fb      	strb	r3, [r7, #27]
 800304c:	e05c      	b.n	8003108 <UART_SetConfig+0x284>
 800304e:	2308      	movs	r3, #8
 8003050:	76fb      	strb	r3, [r7, #27]
 8003052:	e059      	b.n	8003108 <UART_SetConfig+0x284>
 8003054:	2310      	movs	r3, #16
 8003056:	76fb      	strb	r3, [r7, #27]
 8003058:	bf00      	nop
 800305a:	e055      	b.n	8003108 <UART_SetConfig+0x284>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a47      	ldr	r2, [pc, #284]	; (8003180 <UART_SetConfig+0x2fc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d124      	bne.n	80030b0 <UART_SetConfig+0x22c>
 8003066:	4b42      	ldr	r3, [pc, #264]	; (8003170 <UART_SetConfig+0x2ec>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003074:	d012      	beq.n	800309c <UART_SetConfig+0x218>
 8003076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307a:	d802      	bhi.n	8003082 <UART_SetConfig+0x1fe>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d007      	beq.n	8003090 <UART_SetConfig+0x20c>
 8003080:	e012      	b.n	80030a8 <UART_SetConfig+0x224>
 8003082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003086:	d006      	beq.n	8003096 <UART_SetConfig+0x212>
 8003088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800308c:	d009      	beq.n	80030a2 <UART_SetConfig+0x21e>
 800308e:	e00b      	b.n	80030a8 <UART_SetConfig+0x224>
 8003090:	2300      	movs	r3, #0
 8003092:	76fb      	strb	r3, [r7, #27]
 8003094:	e038      	b.n	8003108 <UART_SetConfig+0x284>
 8003096:	2302      	movs	r3, #2
 8003098:	76fb      	strb	r3, [r7, #27]
 800309a:	e035      	b.n	8003108 <UART_SetConfig+0x284>
 800309c:	2304      	movs	r3, #4
 800309e:	76fb      	strb	r3, [r7, #27]
 80030a0:	e032      	b.n	8003108 <UART_SetConfig+0x284>
 80030a2:	2308      	movs	r3, #8
 80030a4:	76fb      	strb	r3, [r7, #27]
 80030a6:	e02f      	b.n	8003108 <UART_SetConfig+0x284>
 80030a8:	2310      	movs	r3, #16
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	bf00      	nop
 80030ae:	e02b      	b.n	8003108 <UART_SetConfig+0x284>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <UART_SetConfig+0x2e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d124      	bne.n	8003104 <UART_SetConfig+0x280>
 80030ba:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <UART_SetConfig+0x2ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c8:	d012      	beq.n	80030f0 <UART_SetConfig+0x26c>
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d802      	bhi.n	80030d6 <UART_SetConfig+0x252>
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <UART_SetConfig+0x260>
 80030d4:	e012      	b.n	80030fc <UART_SetConfig+0x278>
 80030d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030da:	d006      	beq.n	80030ea <UART_SetConfig+0x266>
 80030dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030e0:	d009      	beq.n	80030f6 <UART_SetConfig+0x272>
 80030e2:	e00b      	b.n	80030fc <UART_SetConfig+0x278>
 80030e4:	2300      	movs	r3, #0
 80030e6:	76fb      	strb	r3, [r7, #27]
 80030e8:	e00e      	b.n	8003108 <UART_SetConfig+0x284>
 80030ea:	2302      	movs	r3, #2
 80030ec:	76fb      	strb	r3, [r7, #27]
 80030ee:	e00b      	b.n	8003108 <UART_SetConfig+0x284>
 80030f0:	2304      	movs	r3, #4
 80030f2:	76fb      	strb	r3, [r7, #27]
 80030f4:	e008      	b.n	8003108 <UART_SetConfig+0x284>
 80030f6:	2308      	movs	r3, #8
 80030f8:	76fb      	strb	r3, [r7, #27]
 80030fa:	e005      	b.n	8003108 <UART_SetConfig+0x284>
 80030fc:	2310      	movs	r3, #16
 80030fe:	76fb      	strb	r3, [r7, #27]
 8003100:	bf00      	nop
 8003102:	e001      	b.n	8003108 <UART_SetConfig+0x284>
 8003104:	2310      	movs	r3, #16
 8003106:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <UART_SetConfig+0x2e4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	f040 8087 	bne.w	8003222 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003114:	7efb      	ldrb	r3, [r7, #27]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d836      	bhi.n	8003188 <UART_SetConfig+0x304>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0x29c>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003145 	.word	0x08003145
 8003124:	08003189 	.word	0x08003189
 8003128:	0800314d 	.word	0x0800314d
 800312c:	08003189 	.word	0x08003189
 8003130:	08003153 	.word	0x08003153
 8003134:	08003189 	.word	0x08003189
 8003138:	08003189 	.word	0x08003189
 800313c:	08003189 	.word	0x08003189
 8003140:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003144:	f7ff f914 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003148:	6178      	str	r0, [r7, #20]
        break;
 800314a:	e022      	b.n	8003192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_SetConfig+0x300>)
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e01f      	b.n	8003192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7ff f877 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8003156:	6178      	str	r0, [r7, #20]
        break;
 8003158:	e01b      	b.n	8003192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	617b      	str	r3, [r7, #20]
        break;
 8003160:	e017      	b.n	8003192 <UART_SetConfig+0x30e>
 8003162:	bf00      	nop
 8003164:	efff69f3 	.word	0xefff69f3
 8003168:	40008000 	.word	0x40008000
 800316c:	40013800 	.word	0x40013800
 8003170:	40021000 	.word	0x40021000
 8003174:	40004400 	.word	0x40004400
 8003178:	40004800 	.word	0x40004800
 800317c:	40004c00 	.word	0x40004c00
 8003180:	40005000 	.word	0x40005000
 8003184:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	76bb      	strb	r3, [r7, #26]
        break;
 8003190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 80f1 	beq.w	800337c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d305      	bcc.n	80031b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d902      	bls.n	80031bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	76bb      	strb	r3, [r7, #26]
 80031ba:	e0df      	b.n	800337c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	4619      	mov	r1, r3
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f04f 0400 	mov.w	r4, #0
 80031cc:	0214      	lsls	r4, r2, #8
 80031ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80031d2:	020b      	lsls	r3, r1, #8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6852      	ldr	r2, [r2, #4]
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	4611      	mov	r1, r2
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	eb13 0b01 	adds.w	fp, r3, r1
 80031e4:	eb44 0c02 	adc.w	ip, r4, r2
 80031e8:	4658      	mov	r0, fp
 80031ea:	4661      	mov	r1, ip
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f04f 0400 	mov.w	r4, #0
 80031f4:	461a      	mov	r2, r3
 80031f6:	4623      	mov	r3, r4
 80031f8:	f7fc ffe6 	bl	80001c8 <__aeabi_uldivmod>
 80031fc:	4603      	mov	r3, r0
 80031fe:	460c      	mov	r4, r1
 8003200:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003208:	d308      	bcc.n	800321c <UART_SetConfig+0x398>
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003210:	d204      	bcs.n	800321c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	e0af      	b.n	800337c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	76bb      	strb	r3, [r7, #26]
 8003220:	e0ac      	b.n	800337c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800322a:	d15b      	bne.n	80032e4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800322c:	7efb      	ldrb	r3, [r7, #27]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d827      	bhi.n	8003282 <UART_SetConfig+0x3fe>
 8003232:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <UART_SetConfig+0x3b4>)
 8003234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003238:	0800325d 	.word	0x0800325d
 800323c:	08003265 	.word	0x08003265
 8003240:	0800326d 	.word	0x0800326d
 8003244:	08003283 	.word	0x08003283
 8003248:	08003273 	.word	0x08003273
 800324c:	08003283 	.word	0x08003283
 8003250:	08003283 	.word	0x08003283
 8003254:	08003283 	.word	0x08003283
 8003258:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800325c:	f7ff f888 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003260:	6178      	str	r0, [r7, #20]
        break;
 8003262:	e013      	b.n	800328c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003264:	f7ff f89a 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003268:	6178      	str	r0, [r7, #20]
        break;
 800326a:	e00f      	b.n	800328c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b49      	ldr	r3, [pc, #292]	; (8003394 <UART_SetConfig+0x510>)
 800326e:	617b      	str	r3, [r7, #20]
        break;
 8003270:	e00c      	b.n	800328c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7fe ffe7 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8003276:	6178      	str	r0, [r7, #20]
        break;
 8003278:	e008      	b.n	800328c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327e:	617b      	str	r3, [r7, #20]
        break;
 8003280:	e004      	b.n	800328c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	76bb      	strb	r3, [r7, #26]
        break;
 800328a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d074      	beq.n	800337c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005a      	lsls	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	2b0f      	cmp	r3, #15
 80032ae:	d916      	bls.n	80032de <UART_SetConfig+0x45a>
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b6:	d212      	bcs.n	80032de <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	085b      	lsrs	r3, r3, #1
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	89fb      	ldrh	r3, [r7, #14]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	89fa      	ldrh	r2, [r7, #14]
 80032da:	60da      	str	r2, [r3, #12]
 80032dc:	e04e      	b.n	800337c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	76bb      	strb	r3, [r7, #26]
 80032e2:	e04b      	b.n	800337c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e4:	7efb      	ldrb	r3, [r7, #27]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d827      	bhi.n	800333a <UART_SetConfig+0x4b6>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0x46c>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003315 	.word	0x08003315
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	0800332b 	.word	0x0800332b
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800333b 	.word	0x0800333b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7ff f82c 	bl	8002370 <HAL_RCC_GetPCLK1Freq>
 8003318:	6178      	str	r0, [r7, #20]
        break;
 800331a:	e013      	b.n	8003344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7ff f83e 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003320:	6178      	str	r0, [r7, #20]
        break;
 8003322:	e00f      	b.n	8003344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <UART_SetConfig+0x510>)
 8003326:	617b      	str	r3, [r7, #20]
        break;
 8003328:	e00c      	b.n	8003344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe ff8b 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 800332e:	6178      	str	r0, [r7, #20]
        break;
 8003330:	e008      	b.n	8003344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e004      	b.n	8003344 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	76bb      	strb	r3, [r7, #26]
        break;
 8003342:	bf00      	nop
    }

    if (pclk != 0U)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085a      	lsrs	r2, r3, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	d908      	bls.n	8003378 <UART_SetConfig+0x4f4>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d204      	bcs.n	8003378 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e001      	b.n	800337c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003388:	7ebb      	ldrb	r3, [r7, #26]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003394:	00f42400 	.word	0x00f42400

08003398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01a      	beq.n	80034ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003496:	d10a      	bne.n	80034ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80034ea:	f7fd fb25 	bl	8000b38 <HAL_GetTick>
 80034ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d10e      	bne.n	800351c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f82a 	bl	8003566 <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e020      	b.n	800355e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d10e      	bne.n	8003548 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f814 	bl	8003566 <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e00a      	b.n	800355e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	60f8      	str	r0, [r7, #12]
 800356e:	60b9      	str	r1, [r7, #8]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	4613      	mov	r3, r2
 8003574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003576:	e05d      	b.n	8003634 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357e:	d059      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fd fada 	bl	8000b38 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <UART_WaitOnFlagUntilTimeout+0x30>
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d11b      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e042      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02b      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ea:	d123      	bne.n	8003634 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003604:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2220      	movs	r2, #32
 800361a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2220      	movs	r2, #32
 8003620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e00f      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d092      	beq.n	8003578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4e0d      	ldr	r6, [pc, #52]	; (8003694 <__libc_init_array+0x38>)
 8003660:	4c0d      	ldr	r4, [pc, #52]	; (8003698 <__libc_init_array+0x3c>)
 8003662:	1ba4      	subs	r4, r4, r6
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	2500      	movs	r5, #0
 8003668:	42a5      	cmp	r5, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	4e0b      	ldr	r6, [pc, #44]	; (800369c <__libc_init_array+0x40>)
 800366e:	4c0c      	ldr	r4, [pc, #48]	; (80036a0 <__libc_init_array+0x44>)
 8003670:	f000 f820 	bl	80036b4 <_init>
 8003674:	1ba4      	subs	r4, r4, r6
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	2500      	movs	r5, #0
 800367a:	42a5      	cmp	r5, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003684:	4798      	blx	r3
 8003686:	3501      	adds	r5, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800368e:	4798      	blx	r3
 8003690:	3501      	adds	r5, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	0800371c 	.word	0x0800371c
 8003698:	0800371c 	.word	0x0800371c
 800369c:	0800371c 	.word	0x0800371c
 80036a0:	08003720 	.word	0x08003720

080036a4 <memset>:
 80036a4:	4402      	add	r2, r0
 80036a6:	4603      	mov	r3, r0
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	f803 1b01 	strb.w	r1, [r3], #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <_init>:
 80036b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b6:	bf00      	nop
 80036b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ba:	bc08      	pop	{r3}
 80036bc:	469e      	mov	lr, r3
 80036be:	4770      	bx	lr

080036c0 <_fini>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	bf00      	nop
 80036c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c6:	bc08      	pop	{r3}
 80036c8:	469e      	mov	lr, r3
 80036ca:	4770      	bx	lr
